/*******************************************************************************
 * CopyRight (c) 2005-2008 SKY-MOBI Ltd. All rights reserved.
 * Filename:  pack.h
 * Creator:   wangjian
 * Version:   0.0
 * Date:      
 * Description:
*******************************************************************************/ 

#ifndef __PACK_H__
#define __PACK_H__

#ifdef __cplusplus
extern "C"{
#endif  /* __cplusplus */

/***********************************************************************
 实现类似python中struct. calcsize函数。
 返回fmt对应的buffer长度，注意由于'p' 'P' 长度无法预估，
 该函数fmt中不能出现'p' 'P'，若出现则返回MR_FAILED。
	参数:
fmt :   打包格式字符串
返回:	打包的字节数
失败:	若出现'p' 'P'则返回MR_FAILED。
*******************************************************************************/
int packLen (const char * fmt);


/***********************************************************************
实现类似python中struct.pack的函数。
函数实现将数值转化为C结构的buffer(string)。
函数接收结构格式说明字符串和结构各个元素的值，
返回一个buffer（string），该buffer的结构和内容由输入参数确定，
详细说明可以参考python中struct.pack函数说明。
虽然string. pack和python中struct.pack函数类似，但还存在一些不同，需要注意。

fmt说明：
fmt中可以使用的格式和python的类似，如下表：
+--------+--------------+-------------+---------------+
| Format |   C Type     |  Mythroad   |     Python    |
+--------+--------------+-------------+---------------+
|   x    |  pad byte    |  no value   |    no value   |
+--------+--------------+-------------+---------------+
|   cn   |   char       |string of    |string of      |
|        |              |length n     |length 1       |
+--------+--------------+-------------+---------------+
|   b    |signed char   |  Number     |   integer     |
+--------+--------------+-------------+---------------+
|   B    |unsigned char |  Number     |   integer     |
+--------+--------------+-------------+---------------+
|   h    |    short     |  Number     |   integer     |
+--------+--------------+-------------+---------------+
|   H    |unsigned short|  Number     |   integer     |
+--------+--------------+-------------+---------------+
|   i    |     int      |  Number     |   integer     |
+--------+--------------+-------------+---------------+
|   I    | unsigned int |  Number     |   long        |
+--------+--------------+-------------+---------------+
|   ln   |variant len   |  Number     |   integer     |
|        |int           |             |               |
+--------+--------------+-------------+---------------+
|   Ln   |variant len   |  Number     |   long        |
|        |unsigned int  |             |               |
+--------+--------------+-------------+---------------+
|   p    |  char[]      |  string     |   string      |
+--------+--------------+-------------+---------------+

fmt的第一个前缀说明fmt的字节序，如下表：
+-------------+------------------+
|  Character  |	 Byte order      |
+-------------+------------------+
|  <          |	 little-endian   |
|  >          |  big-endian      |
+-------------+------------------+
1.	与Python类似，fmt的第一前缀说明fmt的字节序，但第一前缀仅支持字节序说明，
	并不说明字节对齐，Mythroad中字节对齐由第二前缀说明。
	当没有第一前缀时，使用主机字节序。
2.	fmt可以有第二前缀"@"，若有第二前缀"@"，使用主机字节对齐。当没有第二前缀时，使用1字节对齐。
3.	'c'后面可以跟数字，当'c'后面跟数字时，表示长度为n的字符串。若没有跟数字，
	表示一个char。当输入的字符串大于'c'后面数字所指定的长度，抛弃多余部分，
	当输入的字符串长度不足，以'\0'填充.
4.	当'p'用于pack时，会使用前一个fmt格式的返回值作为打包的字符串的长度，
	以此实现"LV"（Length，Value）格式的字符串.
5.	'l'或'L'后面可以跟数字，表示n位长度的整型，如"L3"表示3byte的无符号整型，
	n值最大为4；若n大于4，则都会被作为4处理。

参数:
	out	:   打包输出buf
	fmt :   打包格式字符串
	... :   打包变量可变参数
返回:	打包的字节数
*******************************************************************************/
int pack(char *out, const char* fmt, ...);

/********************************************************************************
实现类似python中struct.unpack的函数。
fmt的格式说明参见string.pack。
1.	当'p'用于unpack时，会使用前一个fmt格式的返回值作为字符串的长度，
	以此实现"LV"（Length，Value）格式的字符串（Delphi中的默认字符串即这种格式）。
	用户不需要分配空间,只提供接收buf的指针的地址, 该函数内部会根据前一个参数的值来分配内存空间(\x00\x00结尾),
	内存需要用户自己释放.
	如"Bp"表示一种字符串格式，该格式定义第一个字节为字符串长度，字符串值从第二个字节开始。
2.  'P'和'p'的区别:当用户使用'P'格式时,需要自己分配空间,把buf的地址传该函数.

  参数:
	in	:   解包输入buf
	inLen:  输入包长度
	fmt :   解包格式字符串
	... :   解包变量可变参数
返回:	解包的字节数
*********************************************************************************/
int unpack (char *in, int inLen, const char* fmt, ...);


#ifdef __cplusplus
}
#endif  /* __cplusplus */

#endif /* __PACK_H__ */