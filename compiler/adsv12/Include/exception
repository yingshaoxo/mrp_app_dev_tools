/*
 * C++ Library file exception
 * Copyright 2001 ARM Limited. All rights reserved.
 */

/*
 * RCS $Revision: 1.7.2.1 $
 * Checkin $Date: 2001/03/08 12:13:07 $
 * Revising $Author: sdouglas $
 */

#ifndef _EXCEPTION
#define _EXCEPTION

/* Edison Design Group, 1994. */
/*
exception -- Include file for exception handling (see 18.6)
*/

#ifdef __EDG_RUNTIME_USES_NAMESPACES
namespace std {
#endif /* ifdef __EDG_RUNTIME_USES_NAMESPACES */

  /*
  If bool is not supported, use a typedef for bool.
  */
  #ifdef _BOOL
  typedef bool __bool;
  #else /* ifndef _BOOL */
  typedef int __bool;
  #endif /* ifdef _BOOL */

/* This lets users disable the EDG supplied exception classes. */
#ifndef __NO_EDG_EXCEPTION_CLASSES

  class exception {
  public:
      exception() throw();
      exception(const exception&) throw();
    exception& operator=(const exception&) throw();
    virtual ~exception() throw();
    virtual const char* what() const throw();
  };

  class bad_exception : public exception {
  public:
      bad_exception() throw();
      bad_exception(const bad_exception&) throw();
    bad_exception& operator=(const bad_exception&) throw();
    virtual ~bad_exception() throw();
    virtual const char* what() const throw();
  };

#endif /* ifndef __NO_EDG_EXCEPTION_CLASSES */

  typedef void (*terminate_handler)();
  extern terminate_handler set_terminate(terminate_handler);

  typedef void (*unexpected_handler)();
  extern unexpected_handler set_unexpected(unexpected_handler);

  void terminate();
  void unexpected();

  extern __bool uncaught_exception();

#ifdef __EDG_RUNTIME_USES_NAMESPACES
}  /* namespace */

#ifdef __EDG_IMPLICIT_USING_STD
/* Implicitly include a using directive for the STD namespace when this
   preprocessing flag is TRUE. */
using namespace std;
#endif /* ifdef __EDG_IMPLICIT_USING_STD */

#endif /* ifdef __EDG_RUNTIME_USES_NAMESPACES */

#endif /* _EXCEPTION */
